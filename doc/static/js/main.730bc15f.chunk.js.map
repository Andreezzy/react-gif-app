{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","i","ReactDOM","render","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAiBhD,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAMhB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAlBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,QCTdG,EAAc,SAAC,GAAsB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAEpC,OACE,sBAAKC,UAAU,2DAAf,UACE,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,kCAAMA,EAAN,W,uBCPOK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UAAUF,GAD3C,8DAEFG,MAAMR,GAFJ,cAEfS,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAKc,EAAIE,OAAOC,iBAAiBjB,QAThB,kBAadY,GAbc,4CAAH,sDCIPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEfpB,mBAAS,CAClC0B,KAAM,GACNQ,SAAS,IAJ+B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAwB1C,OAjBAC,qBAAW,WAETlB,EAASC,GACNkB,MAAK,SAAAC,GACJH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAId,CAACd,IAOGe,EDrB2BK,CAAcpB,GAAlCW,EAFyB,EAE/BL,KAAcQ,EAFiB,EAEjBA,QAEtB,OACE,qCACE,qBAAIlB,UAAU,oCAAd,cAAqDI,EAArD,OAEEc,GAAW,2CAEb,qBAAKlB,UAAU,6CAAf,SAEIe,EAAOH,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEOA,GADCA,EAAIC,aEdXW,EAAe,WAAO,IAAD,EAEIzC,mBAAS,CAAC,cAFd,mBAEzBQ,EAFyB,KAEbT,EAFa,KAShC,OACE,qCACE,8CACA,uBAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,6BAEIS,EAAWoB,KAAI,SAACR,EAAUsB,GAAX,OACb,cAAC,EAAD,CAEEtB,SAAWA,GADLA,Y,MCjBpBuB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.730bc15f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n//props = { value: value }\n//{ value } = props\n\nexport const AddCategory = ({ setCategories }) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(inputValue.trim().length > 2){\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue('');\n    }\n    //console.log(\"Submit realizado\");\n  }\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <input\n        type=\"text\"\n        value={ inputValue }\n        onChange={ handleInputChange }\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGridItem = ( { title, url } ) => {\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\n      <img src={ url } alt={ title } />\n      <p> { title } </p>\n    </div>\n  )\n}\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=4004JgR8xgTdRD2dZBCKuVAxAyZTuFYq`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url\n    }\n  });\n\n  return gifs;\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nexport const GifGrid = ({ category }) => {\n\n  const { data: images, loading } = useFetchGifs( category );\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\n\n      { loading && <p>Loading...</p> }\n\n      <div className=\"card-grid animate__animated animate__flash\">\n        {\n          images.map( img => (\n            <GifGridItem\n              key={ img.id }\n              { ...img }\n            />\n          ))\n        }\n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n\n  const [ state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect( () => {\n\n    getGifs( category )\n      .then(imgs => {\n        setState({\n          data: imgs,\n          loading: false\n        });\n      })\n\n  }, [category]);\n  // useEffect( () => {\n  //   getGifs(category)\n  //     //.then( imgs => setImages( imgs ) )\n  //     .then(setImages);\n  // }, [ category ])\n\n  return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch'])\n  \n  // const handleAdd = () => {\n  //   //setCategories([...categories, 'HunterXHunter'])\n  //   setCategories((categories) => [...categories, 'HunterXHunter'])\n  // }\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <hr/>\n\n      <AddCategory setCategories={ setCategories }></AddCategory>\n\n      <ol>\n        {\n          categories.map((category, i) => (\n            <GifGrid\n              key={ category }\n              category={ category }\n            />\n          ))\n        }\n      </ol>\n    </>\n  );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GiftExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}